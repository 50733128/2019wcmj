var tipuesearch = {"pages": [{'title': '讚', 'text': '', 'tags': '', 'url': '讚.html'}, {'title': '簡介', 'text': '首先是這個衝突 (這是新版本內容) \n 終於要來處理衝突了 (這是產生衝突的舊版本內容) \n CMSimfly ( https://github.com/chiamingyen/cmsimfly)  是一套簡單的網際內容管理系統, 採用 Flask 網際框架, 以 Beautifulsoup 解讀分頁內容. \n \n', 'tags': '', 'url': '簡介.html'}, {'title': 'Game1', 'text': "學習如何一次上傳多個圖檔, 並且學會如何引用, 並且設定圖片大小. \n \xa0 \n \n  Your browser doesn't support the HTML5 element canvas.      Throw dice  \n Stage:   Point:   Outcome: ", 'tags': '', 'url': 'Game1.html'}, {'title': 'Game2', 'text': '網路與電腦程式只是工具, 任何人希望與遠端的系統或成員溝通, 可以使用網路. \n 任何人想要利用電腦的能力解決問題, 就必須學會編寫電腦程式, 與電腦溝通. \n Try it \n \n', 'tags': '', 'url': 'Game2.html'}, {'title': 'week3', 'text': '根據\xa0 https://2019wcm.blogspot.com/2019/03/ungit.html \xa0的設定, 完成 ungit 配置. \n ssh 連結 github 倉儲 \n ProxyCommand y:/PortableGit/mingw64/bin/connect.exe -H proxy.kmol.info:3128 %h %p\n\n# for mdecourse\nHost github.com_mdecourse\n    User git\n    Port 22\n    Hostname github.com\n\n    IdentityFile "y:\\home\\.ssh\\id_rsa_mdecourse"\n\n    TCPKeepAlive yes\n    IdentitiesOnly yes \n \n \n', 'tags': '', 'url': 'week3.html'}, {'title': '建立 Windows 10 64 位元可攜程式套件-1', 'text': '\xa0 \n', 'tags': '', 'url': '建立 Windows 10 64 位元可攜程式套件-1.html'}, {'title': '建立 Github 倉儲-1', 'text': '\xa0 \n', 'tags': '', 'url': '建立 Github 倉儲-1.html'}, {'title': '啟用倉儲的 Github Pages 與 CMSimfly-1', 'text': '\n', 'tags': '', 'url': '啟用倉儲的 Github Pages 與 CMSimfly-1.html'}, {'title': '使用 SSH 執行 Git clone 與 push-1', 'text': '在 Windows 10 環境下使用可攜系統的優點是使用者可以隨身攜帶程式開發環境外, 還能將工作中的倉儲與認證用資料隨身, 以便在任何時間進行近端或遠端資料維護. 以下操作因僅用於課程教學使用, 所建立的認證用 Private Key 並未使用密碼保護, 其他非教學情境下, 建議一定要多加一組密碼保護認證用 Private Key, 一旦隨身碟遺失後, 無需擔心重要資料被竄改. 未採用密碼保護的 Private Key, 若隨身碟遺失, 則需即刻重新設定 Github 帳號中所使用的 SSH Public Key. 關閉操作系統儲存 Github 帳號密碼設定 目前 KMOL 所使用的 PortableGIT, 內建設定的 credential helper 為 manger, 表示當使用者使用 git push 時內建會跳出讓使用者輸入帳號密碼的對話視窗, 一旦使用者輸入帳號密碼後, 該資料將會儲存於操作系統中, 即便使用者選擇取消, 以手動輸入帳號密碼, 操作系統的 credential manager 依然會保存此一私密資料. 使用 git config --edit --system 可以帶出 vi 編輯器, 編輯 git 指令所使用的系統設定, 只要將 credential 項目中的 helper = manager 刪除後儲存, 即可關閉內定將使用者 Github 帳號密碼儲存於操作系統的問題. \n', 'tags': '', 'url': '使用 SSH 執行 Git clone 與 push-1.html'}, {'title': '建立 OpenSSH 格式的 Private 與 Public Keys-1', 'text': '接下來, 在可攜系統的命令列視窗中, 以 sh 執行 Git 的 shell, 使用 ssh-keygen -t rsa -b 4096 -C "This is my key" 建立位於 y:\\home\\.ssh\\id_rsa 的 Private Key 與位於 y:\\home\\.ssh\\id_rsa.pub 的 Public Key, 並且將 id_rsa.pub 的內容, 轉貼到 Github 帳號 settings 中 SSH and GPG keys 項目內的 SSH Public Key 區. 使用 ssh 協定執行 git clone 為了採用 OpenSSH 協定執行登入認證, 使用者在近端 git clone 倉儲時, 必須使用類似 git@github.com:帳號/倉儲.git 的連線 URL 例如: \xa0 要將 \xa0 https://github.com/mdecourse/wcm2019 \xa0 的倉儲, 以 ssh 協定 git clone 到近端時, 必須使用: git clone git@github.com:mdecourse/wcm2019.git 建立位於 wcm2019 的倉儲目錄, 而 git add ., git commit -m 與 git push 的指令則與採 http 連線時的指令相同. 只是採用 ssh 連線下的 git push, git 會讀取位於 y:\\home\\.ssh\\id_rsa Private Key 與 Github 帳號上所設定的 Public Key 進行比對, 若同為一個 pair, 則通過認證, 可將改版的資料推送到遠端倉儲中. 上述 ssh 協定下的 git clone 與 git push, 配合 ungit 使用時, 可以直接輸入提交訊息後, 以 commit & push 將近端版本提交推送到遠端. ssh 連線透過 proxy server, 必須設定 y:\\home\\.ssh\\config 如下: \n ProxyCommand y:/PortableGit/mingw64/bin/connect.exe -H proxy.kmol.info:3128 %h %p\n \n# for user1\n# url = git@github.com_user1:user1/cmstest.git\nHost github.com_user1\n    User git\n    Port 22\n    Hostname github.com\n \n    IdentityFile "y:\\home\\.ssh\\id_rsa_user1"\n \n    TCPKeepAlive yes\n    IdentitiesOnly yes\n     \n# for user2\n# url = git@github.com_user2:user2/user2.com.git\nHost github.com_user2\n    Port 22\n    Hostname github.com\n \n    IdentityFile "y:\\home\\.ssh\\id_rsa_user2"\n \n    TCPKeepAlive yes\n    IdentitiesOnly yes\n     \n \n', 'tags': '', 'url': '建立 OpenSSH 格式的 Private 與 Public Keys-1.html'}, {'title': '自製可攜系統-1', 'text': '以下影片則說明如何自行建立可攜程式系統, 包括從 \xa0 Python \xa0 下載, 安裝, 複製到隨身碟, 移除系統安裝, 然後進行命令搜尋設定等相關技術, 所完成的可攜隨身系統可以解譯流程執行 Python 3 與 ANSI C 程式: \n 納入 \xa0 ShareX \xa0 的可攜系統: \n \xa0 \n 建立 \xa0 Blogger \xa0 網誌 \n 本學期除了繼續使用 \xa0 Pelican \xa0 網誌系統外, 還導入動態的 \xa0 Google Blogger \xa0 網誌, 以下影片說明如何登入 Google 帳號後, 建立客製化的 Blogger 系統: 機械設計工程系網誌:\xa0 https://mde2019.blogspot.com/\xa0 精密機械工程科網誌:\xa0 https://pmenfu.blogspot.com/ \n', 'tags': '', 'url': '自製可攜系統-1.html'}, {'title': '建立 Github 倉儲-2', 'text': '\n 建立 \xa0 Github Pages \xa0 網站 \n \n 利用 \xa0 CMSimfly \xa0 以及 \xa0 Github Pages \xa0 建立網際內容管理系統: \n \xa0 \n', 'tags': '', 'url': '建立 Github 倉儲-2.html'}, {'title': '以 ssh 連線對 Github 倉儲改版-1', 'text': '\xa0 \xa0 \n', 'tags': '', 'url': '以 ssh 連線對 Github 倉儲改版-1.html'}, {'title': '加入設定, 讓 ssh 連線透過 Proxy Server 擷取資料-1', 'text': '加入 y:\\home\\.ssh\\config 設定, 讓 ssh 連線透過 Proxy Server 擷取資料: \xa0 \xa0 \n', 'tags': '', 'url': '加入設定, 讓 ssh 連線透過 Proxy Server 擷取資料-1.html'}, {'title': 'IPv6 環境設定與 Git 操作設定-1', 'text': '\n', 'tags': '', 'url': 'IPv6 環境設定與 Git 操作設定-1.html'}, {'title': '電腦初學者的網際內容管理-1', 'text': '\n \n \n 第一步 網路連線設定 了解機械設計系電腦輔助設計室電腦的網路設定, 其中包括 IPv4 網路與 IPv6 網路設定. 正常情況下, 電腦輔助設計室中的 64 台電腦透過 IPv4 協定下的 DHCP 與 NAT 上網, 各電腦以 DHCP client 取得 192.168.1.* 的網路位址, 然後以 NAT 的一組外部 IP 上網, 通常必須設定 Proxy Server 為 http://proxy.kmol.info:3128 後上網會比較順暢, 但若 8 台 Proxy Servers 無法正常運作時, 則取消 Proxy Server 的設定. 瀏覽器代理主機設定 了解如何設定 Google Chrome 與 Firefox 瀏覽器的代理主機設定. 申請 Github 帳號 利用 Gmail 帳號申請 Github 帳號, 申請後利用電子郵箱收信進行確認後, 就可以在 Github 上建立倉儲. 第二步 配置可攜程式環境 取得 Windows 10 64 位元環境下的可攜程式環境 ( 下載\xa0 2019_cdb_w5.7z ), 下載後解開目錄, 放入 USB3.0 規格以上的隨身碟或隨身硬碟. 以滑鼠點擊 start.bat 開啟可攜隨身系統, 以 stop.bat 關閉可攜隨身系統, 隨身碟必須在關閉所有應用程式執行下, 才可正常退出. 了解基本的 DOS (Disk Operating System) 指令 C:\\> 符號為 DOS 命令列視窗的回應 (Prompt), 表示目前在 C 槽硬碟的 \\ 根目錄, 若要切換到 Y 槽, 則在電腦的回應後, 輸入 Y:, 命令列將轉為 Y:\\> 若要更換目錄, 則使用 cd, 也就是 change directory 的意思, 例如: Y:\\>cd tmp 表示要從 Y 槽的根目錄更換到 tmp 目錄, 也就是 Y:\\tmp> 若要再回到 Y 槽的根目錄, 可以使用 cd .. 表示要從目前所在目錄, 往上跳回一個目錄, 也就是重新回到 Y 槽的根目錄. 另外, 無論目前位於哪一個子目錄, 也可以使用 cd \\ 直接回到根目錄. 或者從 Y:\\> 直接使用 cd \\tmp\\repo\\ssh\\wcm2019 直接從 Y 槽的根目錄, 跳進 Y:\\tmp\\repo\\ssh\\wcm2019> 此外, 常用的 DOS 指令有: dir - 列出目前所在目錄的內容 mkdir - 隨後加上要建立目錄的名稱, 可以建立目錄 cls - clear screen, 清除目前的命令列顯示的內容 第三步 建立 Git 倉儲, 並 clone 倉儲至近端工作後, 對遠端倉儲改版 可攜程式系統中已經內建 git, 可以在啟動 start.bat 後, 透過 path 的設定, 直接執行 git 指令. 建立 Git 倉儲, 共分為兩類, 一類是直接在 Github 網際介面下建立倉儲時, 要求建立 README.md 檔案, 之後可以直接在近端, 以 git clone 加上倉儲連線 URL, 將倉儲克隆一份到近端, 並以最新版本作為工作目錄, 使用者改版後, 可以直接透過 git add, commit 與 push 對遠端倉儲改版. 另一類則是故意在 Github 網際介面下建立倉儲時, 不要建立任何檔案, 而是在近端自行利用 git 指令建立倉儲架構, 新增內容後, 以 git remote add 設法在近端倉儲中納入 origin URL 後, 將近端倉儲版本新增提交推送到遠端. git add git add 可以用來新增一個檔案, 數個檔案, 或在之前提交後所新增的所有內容. git add 在 GIT 架構下, 是對所新增或修改的內容拍快照: \n git add . adds all modified and new (untracked) files in the current directory and all subdirectories to the staging area (a.k.a. the index), thus preparing them to be included in the next git commit . Any files matching the patterns in the .gitignore file will be ignored by git add \n git commit\xa0 git commit 執行之前, 必須使用 git config 建立臨時或永久的身分註記, 因為 GIT 在展開所有改版內容時, 必須明確登錄這些變更的作者與時間. 當使用者採用 git commit -m "改版說明訊息", 此次提交到 .git 目錄下的更動內容, 均會綁定使用者身分與改版所輸入的說明訊息. git push git push 在隨後沒有輸入遠端 URL 代號時, 表示要推送到 origin, 若透過 git remote add 設定其他代號與 URL 對應時, git push 加上代號, 就可以將此次的提交內容, 推送到指定的 URL 所在遠端倉儲. 第四步 自行建立靜態內容管理網站 利用 CMSimfly ( https://github.com/chiamingyen/cmsimfly )\xa0內容, 建立自己的 \xa0 Github Pages \xa0 網站 第五步 管理網站內容 學習如何使用 CMSimfly, 在網站中加入各種內容 第六步 使用 Flask, bs4 與 lxml 模組 了解 CMSimfly 如何建構, 並且嘗試修改現有功能, 除錯或建立自己的網際內容管理系統 \n \n 進階內容 第七步 虛擬主機下的類 Github 網站 如何利用 \xa0 Fossil SCM , 在 \xa0 Virtualbox \xa0 中的 \xa0 Ubuntu 18.04-2 \xa0(8.5 GB) 建立類似 Github 的系統, 可以放入 CMSimfly 的靜態網頁 第八步 實體主機下的網際內容管理 如何在實體主機上安裝 \xa0 Ubuntu \xa0 18.04 ( https://www.ubuntu.com/about/release-cycle ), 配置網路連線, 然後架構 \xa0 uwsgi \xa0 環境下的 CMSimfly 動態網站, 或建立 Fossil SCM 用來伺服管理 CMSimfly 下有版次管理的靜態網頁, 或利用 \xa0 nginx \xa0 伺服無版次管理的 CMSimfly 靜態網頁.', 'tags': '', 'url': '電腦初學者的網際內容管理-1.html'}, {'title': '建立 Github 倉儲-3', 'text': '\xa0 \n', 'tags': '', 'url': '建立 Github 倉儲-3.html'}, {'title': '啟用倉儲的 Github Pages 與 CMSimfly-2', 'text': '\n', 'tags': '', 'url': '啟用倉儲的 Github Pages 與 CMSimfly-2.html'}, {'title': '使用 SSH 執行 Git clone 與 push-2', 'text': '在 Windows 10 環境下使用可攜系統的優點是使用者可以隨身攜帶程式開發環境外, 還能將工作中的倉儲與認證用資料隨身, 以便在任何時間進行近端或遠端資料維護. 以下操作因僅用於課程教學使用, 所建立的認證用 Private Key 並未使用密碼保護, 其他非教學情境下, 建議一定要多加一組密碼保護認證用 Private Key, 一旦隨身碟遺失後, 無需擔心重要資料被竄改. 未採用密碼保護的 Private Key, 若隨身碟遺失, 則需即刻重新設定 Github 帳號中所使用的 SSH Public Key. 關閉操作系統儲存 Github 帳號密碼設定 目前 KMOL 所使用的 PortableGIT, 內建設定的 credential helper 為 manger, 表示當使用者使用 git push 時內建會跳出讓使用者輸入帳號密碼的對話視窗, 一旦使用者輸入帳號密碼後, 該資料將會儲存於操作系統中, 即便使用者選擇取消, 以手動輸入帳號密碼, 操作系統的 credential manager 依然會保存此一私密資料. 使用 git config --edit --system 可以帶出 vi 編輯器, 編輯 git 指令所使用的系統設定, 只要將 credential 項目中的 helper = manager 刪除後儲存, 即可關閉內定將使用者 Github 帳號密碼儲存於操作系統的問題. \n', 'tags': '', 'url': '使用 SSH 執行 Git clone 與 push-2.html'}, {'title': '建立 OpenSSH 格式的 Private 與 Public Keys-2', 'text': '接下來, 在可攜系統的命令列視窗中, 以 sh 執行 Git 的 shell, 使用 ssh-keygen -t rsa -b 4096 -C "This is my key" 建立位於 y:\\home\\.ssh\\id_rsa 的 Private Key 與位於 y:\\home\\.ssh\\id_rsa.pub 的 Public Key, 並且將 id_rsa.pub 的內容, 轉貼到 Github 帳號 settings 中 SSH and GPG keys 項目內的 SSH Public Key 區. 使用 ssh 協定執行 git clone 為了採用 OpenSSH 協定執行登入認證, 使用者在近端 git clone 倉儲時, 必須使用類似 git@github.com:帳號/倉儲.git 的連線 URL 例如: \xa0 要將 \xa0 https://github.com/mdecourse/wcm2019 \xa0 的倉儲, 以 ssh 協定 git clone 到近端時, 必須使用: git clone git@github.com:mdecourse/wcm2019.git 建立位於 wcm2019 的倉儲目錄, 而 git add ., git commit -m 與 git push 的指令則與採 http 連線時的指令相同. 只是採用 ssh 連線下的 git push, git 會讀取位於 y:\\home\\.ssh\\id_rsa Private Key 與 Github 帳號上所設定的 Public Key 進行比對, 若同為一個 pair, 則通過認證, 可將改版的資料推送到遠端倉儲中. 上述 ssh 協定下的 git clone 與 git push, 配合 ungit 使用時, 可以直接輸入提交訊息後, 以 commit & push 將近端版本提交推送到遠端. ssh 連線透過 proxy server, 必須設定 y:\\home\\.ssh\\config 如下: \n ProxyCommand y:/PortableGit/mingw64/bin/connect.exe -H proxy.kmol.info:3128 %h %p\n \n# for user1\n# url = git@github.com_user1:user1/cmstest.git\nHost github.com_user1\n    User git\n    Port 22\n    Hostname github.com\n \n    IdentityFile "y:\\home\\.ssh\\id_rsa_user1"\n \n    TCPKeepAlive yes\n    IdentitiesOnly yes\n     \n# for user2\n# url = git@github.com_user2:user2/user2.com.git\nHost github.com_user2\n    Port 22\n    Hostname github.com\n \n    IdentityFile "y:\\home\\.ssh\\id_rsa_user2"\n \n    TCPKeepAlive yes\n    IdentitiesOnly yes\n     \n \n', 'tags': '', 'url': '建立 OpenSSH 格式的 Private 與 Public Keys-2.html'}, {'title': '導入 Ungit-1', 'text': '說明自 2019 Spring 開始, 可以利用 \xa0 ungit \xa0 簡化近端 Git 指令的使用, 透過網際圖形化介面, 讓使用者進行分散式內容版次管理. \xa0 說明如何利用 \xa0 CMSimfly \xa0 以動態模式在近端改版後, 將資料轉為靜態網頁後, 新增提交推送到遠端對應倉儲, 詳細說明請參閱下列影片: \xa0 \n 利用 \xa0 kungit.bat \xa0 在倉儲目錄中啟用 ungit \n \xa0 \n', 'tags': '', 'url': '導入 Ungit-1.html'}, {'title': '自製可攜系統-2', 'text': '以下影片則說明如何自行建立可攜程式系統, 包括從 \xa0 Python \xa0 下載, 安裝, 複製到隨身碟, 移除系統安裝, 然後進行命令搜尋設定等相關技術, 所完成的可攜隨身系統可以解譯流程執行 Python 3 與 ANSI C 程式: \n 納入 \xa0 ShareX \xa0 的可攜系統: \n \xa0 \n 建立 \xa0 Blogger \xa0 網誌 \n 本學期除了繼續使用 \xa0 Pelican \xa0 網誌系統外, 還導入動態的 \xa0 Google Blogger \xa0 網誌, 以下影片說明如何登入 Google 帳號後, 建立客製化的 Blogger 系統: 機械設計工程系網誌:\xa0 https://mde2019.blogspot.com/\xa0 精密機械工程科網誌:\xa0 https://pmenfu.blogspot.com/ \n', 'tags': '', 'url': '自製可攜系統-2.html'}, {'title': '建立 Github 倉儲-4', 'text': '\n 建立 \xa0 Github Pages \xa0 網站 \n \n 利用 \xa0 CMSimfly \xa0 以及 \xa0 Github Pages \xa0 建立網際內容管理系統: \n \xa0 \n', 'tags': '', 'url': '建立 Github 倉儲-4.html'}, {'title': '以 ssh 連線對 Github 倉儲改版-2', 'text': '\xa0 \xa0 \n', 'tags': '', 'url': '以 ssh 連線對 Github 倉儲改版-2.html'}, {'title': '加入設定, 讓 ssh 連線透過 Proxy Server 擷取資料-2', 'text': '加入 y:\\home\\.ssh\\config 設定, 讓 ssh 連線透過 Proxy Server 擷取資料: \xa0 \xa0 \n', 'tags': '', 'url': '加入設定, 讓 ssh 連線透過 Proxy Server 擷取資料-2.html'}, {'title': 'IPv6 環境設定與 Git 操作設定-2', 'text': '\n', 'tags': '', 'url': 'IPv6 環境設定與 Git 操作設定-2.html'}, {'title': '建立 Windows 10 64 位元可攜程式套件-2', 'text': '\xa0 \n', 'tags': '', 'url': '建立 Windows 10 64 位元可攜程式套件-2.html'}, {'title': '建立 Github 倉儲-5', 'text': '\xa0 \n', 'tags': '', 'url': '建立 Github 倉儲-5.html'}, {'title': '啟用倉儲的 Github Pages 與 CMSimfly-3', 'text': '\n', 'tags': '', 'url': '啟用倉儲的 Github Pages 與 CMSimfly-3.html'}, {'title': '使用 SSH 執行 Git clone 與 push-3', 'text': '在 Windows 10 環境下使用可攜系統的優點是使用者可以隨身攜帶程式開發環境外, 還能將工作中的倉儲與認證用資料隨身, 以便在任何時間進行近端或遠端資料維護. 以下操作因僅用於課程教學使用, 所建立的認證用 Private Key 並未使用密碼保護, 其他非教學情境下, 建議一定要多加一組密碼保護認證用 Private Key, 一旦隨身碟遺失後, 無需擔心重要資料被竄改. 未採用密碼保護的 Private Key, 若隨身碟遺失, 則需即刻重新設定 Github 帳號中所使用的 SSH Public Key. 關閉操作系統儲存 Github 帳號密碼設定 目前 KMOL 所使用的 PortableGIT, 內建設定的 credential helper 為 manger, 表示當使用者使用 git push 時內建會跳出讓使用者輸入帳號密碼的對話視窗, 一旦使用者輸入帳號密碼後, 該資料將會儲存於操作系統中, 即便使用者選擇取消, 以手動輸入帳號密碼, 操作系統的 credential manager 依然會保存此一私密資料. 使用 git config --edit --system 可以帶出 vi 編輯器, 編輯 git 指令所使用的系統設定, 只要將 credential 項目中的 helper = manager 刪除後儲存, 即可關閉內定將使用者 Github 帳號密碼儲存於操作系統的問題. \n', 'tags': '', 'url': '使用 SSH 執行 Git clone 與 push-3.html'}, {'title': '建立 OpenSSH 格式的 Private 與 Public Keys-3', 'text': '接下來, 在可攜系統的命令列視窗中, 以 sh 執行 Git 的 shell, 使用 ssh-keygen -t rsa -b 4096 -C "This is my key" 建立位於 y:\\home\\.ssh\\id_rsa 的 Private Key 與位於 y:\\home\\.ssh\\id_rsa.pub 的 Public Key, 並且將 id_rsa.pub 的內容, 轉貼到 Github 帳號 settings 中 SSH and GPG keys 項目內的 SSH Public Key 區. 使用 ssh 協定執行 git clone 為了採用 OpenSSH 協定執行登入認證, 使用者在近端 git clone 倉儲時, 必須使用類似 git@github.com:帳號/倉儲.git 的連線 URL 例如: \xa0 要將 \xa0 https://github.com/mdecourse/wcm2019 \xa0 的倉儲, 以 ssh 協定 git clone 到近端時, 必須使用: git clone git@github.com:mdecourse/wcm2019.git 建立位於 wcm2019 的倉儲目錄, 而 git add ., git commit -m 與 git push 的指令則與採 http 連線時的指令相同. 只是採用 ssh 連線下的 git push, git 會讀取位於 y:\\home\\.ssh\\id_rsa Private Key 與 Github 帳號上所設定的 Public Key 進行比對, 若同為一個 pair, 則通過認證, 可將改版的資料推送到遠端倉儲中. 上述 ssh 協定下的 git clone 與 git push, 配合 ungit 使用時, 可以直接輸入提交訊息後, 以 commit & push 將近端版本提交推送到遠端. ssh 連線透過 proxy server, 必須設定 y:\\home\\.ssh\\config 如下: \n ProxyCommand y:/PortableGit/mingw64/bin/connect.exe -H proxy.kmol.info:3128 %h %p\n \n# for user1\n# url = git@github.com_user1:user1/cmstest.git\nHost github.com_user1\n    User git\n    Port 22\n    Hostname github.com\n \n    IdentityFile "y:\\home\\.ssh\\id_rsa_user1"\n \n    TCPKeepAlive yes\n    IdentitiesOnly yes\n     \n# for user2\n# url = git@github.com_user2:user2/user2.com.git\nHost github.com_user2\n    Port 22\n    Hostname github.com\n \n    IdentityFile "y:\\home\\.ssh\\id_rsa_user2"\n \n    TCPKeepAlive yes\n    IdentitiesOnly yes\n     \n \n', 'tags': '', 'url': '建立 OpenSSH 格式的 Private 與 Public Keys-3.html'}, {'title': '導入 Ungit-2', 'text': '說明自 2019 Spring 開始, 可以利用 \xa0 ungit \xa0 簡化近端 Git 指令的使用, 透過網際圖形化介面, 讓使用者進行分散式內容版次管理. \xa0 說明如何利用 \xa0 CMSimfly \xa0 以動態模式在近端改版後, 將資料轉為靜態網頁後, 新增提交推送到遠端對應倉儲, 詳細說明請參閱下列影片: \xa0 \n 利用 \xa0 kungit.bat \xa0 在倉儲目錄中啟用 ungit \n \xa0 \n', 'tags': '', 'url': '導入 Ungit-2.html'}, {'title': '自製可攜系統-3', 'text': '以下影片則說明如何自行建立可攜程式系統, 包括從 \xa0 Python \xa0 下載, 安裝, 複製到隨身碟, 移除系統安裝, 然後進行命令搜尋設定等相關技術, 所完成的可攜隨身系統可以解譯流程執行 Python 3 與 ANSI C 程式: \n 納入 \xa0 ShareX \xa0 的可攜系統: \n \xa0 \n 建立 \xa0 Blogger \xa0 網誌 \n 本學期除了繼續使用 \xa0 Pelican \xa0 網誌系統外, 還導入動態的 \xa0 Google Blogger \xa0 網誌, 以下影片說明如何登入 Google 帳號後, 建立客製化的 Blogger 系統: 機械設計工程系網誌:\xa0 https://mde2019.blogspot.com/\xa0 精密機械工程科網誌:\xa0 https://pmenfu.blogspot.com/ \n', 'tags': '', 'url': '自製可攜系統-3.html'}, {'title': '建立 Github 倉儲-6', 'text': '\n 建立 \xa0 Github Pages \xa0 網站 \n \n 利用 \xa0 CMSimfly \xa0 以及 \xa0 Github Pages \xa0 建立網際內容管理系統: \n \xa0 \n', 'tags': '', 'url': '建立 Github 倉儲-6.html'}, {'title': '以 ssh 連線對 Github 倉儲改版-3', 'text': '\xa0 \xa0 \n', 'tags': '', 'url': '以 ssh 連線對 Github 倉儲改版-3.html'}, {'title': '加入設定, 讓 ssh 連線透過 Proxy Server 擷取資料-3', 'text': '加入 y:\\home\\.ssh\\config 設定, 讓 ssh 連線透過 Proxy Server 擷取資料: \xa0 \xa0 \n', 'tags': '', 'url': '加入設定, 讓 ssh 連線透過 Proxy Server 擷取資料-3.html'}, {'title': 'IPv6 環境設定與 Git 操作設定-3', 'text': '\n', 'tags': '', 'url': 'IPv6 環境設定與 Git 操作設定-3.html'}, {'title': '電腦初學者的網際內容管理-2', 'text': '\n \n \n 第一步 網路連線設定 了解機械設計系電腦輔助設計室電腦的網路設定, 其中包括 IPv4 網路與 IPv6 網路設定. 正常情況下, 電腦輔助設計室中的 64 台電腦透過 IPv4 協定下的 DHCP 與 NAT 上網, 各電腦以 DHCP client 取得 192.168.1.* 的網路位址, 然後以 NAT 的一組外部 IP 上網, 通常必須設定 Proxy Server 為 http://proxy.kmol.info:3128 後上網會比較順暢, 但若 8 台 Proxy Servers 無法正常運作時, 則取消 Proxy Server 的設定. 瀏覽器代理主機設定 了解如何設定 Google Chrome 與 Firefox 瀏覽器的代理主機設定. 申請 Github 帳號 利用 Gmail 帳號申請 Github 帳號, 申請後利用電子郵箱收信進行確認後, 就可以在 Github 上建立倉儲. 第二步 配置可攜程式環境 取得 Windows 10 64 位元環境下的可攜程式環境 ( 下載\xa0 2019_cdb_w5.7z ), 下載後解開目錄, 放入 USB3.0 規格以上的隨身碟或隨身硬碟. 以滑鼠點擊 start.bat 開啟可攜隨身系統, 以 stop.bat 關閉可攜隨身系統, 隨身碟必須在關閉所有應用程式執行下, 才可正常退出. 了解基本的 DOS (Disk Operating System) 指令 C:\\> 符號為 DOS 命令列視窗的回應 (Prompt), 表示目前在 C 槽硬碟的 \\ 根目錄, 若要切換到 Y 槽, 則在電腦的回應後, 輸入 Y:, 命令列將轉為 Y:\\> 若要更換目錄, 則使用 cd, 也就是 change directory 的意思, 例如: Y:\\>cd tmp 表示要從 Y 槽的根目錄更換到 tmp 目錄, 也就是 Y:\\tmp> 若要再回到 Y 槽的根目錄, 可以使用 cd .. 表示要從目前所在目錄, 往上跳回一個目錄, 也就是重新回到 Y 槽的根目錄. 另外, 無論目前位於哪一個子目錄, 也可以使用 cd \\ 直接回到根目錄. 或者從 Y:\\> 直接使用 cd \\tmp\\repo\\ssh\\wcm2019 直接從 Y 槽的根目錄, 跳進 Y:\\tmp\\repo\\ssh\\wcm2019> 此外, 常用的 DOS 指令有: dir - 列出目前所在目錄的內容 mkdir - 隨後加上要建立目錄的名稱, 可以建立目錄 cls - clear screen, 清除目前的命令列顯示的內容 第三步 建立 Git 倉儲, 並 clone 倉儲至近端工作後, 對遠端倉儲改版 可攜程式系統中已經內建 git, 可以在啟動 start.bat 後, 透過 path 的設定, 直接執行 git 指令. 建立 Git 倉儲, 共分為兩類, 一類是直接在 Github 網際介面下建立倉儲時, 要求建立 README.md 檔案, 之後可以直接在近端, 以 git clone 加上倉儲連線 URL, 將倉儲克隆一份到近端, 並以最新版本作為工作目錄, 使用者改版後, 可以直接透過 git add, commit 與 push 對遠端倉儲改版. 另一類則是故意在 Github 網際介面下建立倉儲時, 不要建立任何檔案, 而是在近端自行利用 git 指令建立倉儲架構, 新增內容後, 以 git remote add 設法在近端倉儲中納入 origin URL 後, 將近端倉儲版本新增提交推送到遠端. git add git add 可以用來新增一個檔案, 數個檔案, 或在之前提交後所新增的所有內容. git add 在 GIT 架構下, 是對所新增或修改的內容拍快照: \n git add . adds all modified and new (untracked) files in the current directory and all subdirectories to the staging area (a.k.a. the index), thus preparing them to be included in the next git commit . Any files matching the patterns in the .gitignore file will be ignored by git add \n git commit\xa0 git commit 執行之前, 必須使用 git config 建立臨時或永久的身分註記, 因為 GIT 在展開所有改版內容時, 必須明確登錄這些變更的作者與時間. 當使用者採用 git commit -m "改版說明訊息", 此次提交到 .git 目錄下的更動內容, 均會綁定使用者身分與改版所輸入的說明訊息. git push git push 在隨後沒有輸入遠端 URL 代號時, 表示要推送到 origin, 若透過 git remote add 設定其他代號與 URL 對應時, git push 加上代號, 就可以將此次的提交內容, 推送到指定的 URL 所在遠端倉儲. 第四步 自行建立靜態內容管理網站 利用 CMSimfly ( https://github.com/chiamingyen/cmsimfly )\xa0內容, 建立自己的 \xa0 Github Pages \xa0 網站 第五步 管理網站內容 學習如何使用 CMSimfly, 在網站中加入各種內容 第六步 使用 Flask, bs4 與 lxml 模組 了解 CMSimfly 如何建構, 並且嘗試修改現有功能, 除錯或建立自己的網際內容管理系統 \n \n 進階內容 第七步 虛擬主機下的類 Github 網站 如何利用 \xa0 Fossil SCM , 在 \xa0 Virtualbox \xa0 中的 \xa0 Ubuntu 18.04-2 \xa0(8.5 GB) 建立類似 Github 的系統, 可以放入 CMSimfly 的靜態網頁 第八步 實體主機下的網際內容管理 如何在實體主機上安裝 \xa0 Ubuntu \xa0 18.04 ( https://www.ubuntu.com/about/release-cycle ), 配置網路連線, 然後架構 \xa0 uwsgi \xa0 環境下的 CMSimfly 動態網站, 或建立 Fossil SCM 用來伺服管理 CMSimfly 下有版次管理的靜態網頁, 或利用 \xa0 nginx \xa0 伺服無版次管理的 CMSimfly 靜態網頁.', 'tags': '', 'url': '電腦初學者的網際內容管理-2.html'}, {'title': 'week_4', 'text': '本週課程在說明如何利用\xa0 Github Pages \xa0 與 \xa0 CMSimfly , 建立個人的靜態網際內容管理系統. \n 進度內容及影片取自 https://2019wcm.blogspot.com/ 網際內容管理網誌。 Demo 網站: \xa0 https://mdecourse.github.io/2019wcmj 此處所謂的靜態網際內容管理指 \xa0 Github Pages \xa0 目前只允許伺服倉儲中特定分支的特定目錄中的超文件, 亦即 \xa0 Html \xa0 檔案與 \xa0 Javascript \xa0 程式檔案, 而 CMSimfly 的靜態網頁就是利用 Python 程式, 設法將原本的動態網站系統的內容轉為超文件與 Javascript 後, 單獨儲存在 content 目錄下, 然後透過倉儲根目錄中的 index.html 進行跳轉至 content/index.html, 但是 CMSimfly 倉儲中仍然保留所有動態系統的 Python 程式與設定, 可上傳至其他支援執行 Python 的網際應用伺服器 (例如: \xa0 Heroku ), 並以動態的網站格式型態, 讓管理者登入進行內容管理. 之後, 我們將以 Github 倉儲中的資料版本為主, 設法在各用戶的近端可攜環境中進行版本管理, 然後再同步到 \xa0 Heroku \xa0 動態網站, 或其他自架的網站. \n 以下為與本週課程有關的操作說明影片. \n', 'tags': '', 'url': 'week_4.html'}, {'title': '建立 Windows 10 64 位元可攜程式套件-3', 'text': '\xa0 \n', 'tags': '', 'url': '建立 Windows 10 64 位元可攜程式套件-3.html'}, {'title': '建立 Github 倉儲-7', 'text': '\xa0 \n', 'tags': '', 'url': '建立 Github 倉儲-7.html'}, {'title': '啟用倉儲的 Github Pages 與 CMSimfly-4', 'text': '\n', 'tags': '', 'url': '啟用倉儲的 Github Pages 與 CMSimfly-4.html'}, {'title': '使用 SSH 執行 Git clone 與 push-4', 'text': '在 Windows 10 環境下使用可攜系統的優點是使用者可以隨身攜帶程式開發環境外, 還能將工作中的倉儲與認證用資料隨身, 以便在任何時間進行近端或遠端資料維護. 以下操作因僅用於課程教學使用, 所建立的認證用 Private Key 並未使用密碼保護, 其他非教學情境下, 建議一定要多加一組密碼保護認證用 Private Key, 一旦隨身碟遺失後, 無需擔心重要資料被竄改. 未採用密碼保護的 Private Key, 若隨身碟遺失, 則需即刻重新設定 Github 帳號中所使用的 SSH Public Key. 關閉操作系統儲存 Github 帳號密碼設定 目前 KMOL 所使用的 PortableGIT, 內建設定的 credential helper 為 manger, 表示當使用者使用 git push 時內建會跳出讓使用者輸入帳號密碼的對話視窗, 一旦使用者輸入帳號密碼後, 該資料將會儲存於操作系統中, 即便使用者選擇取消, 以手動輸入帳號密碼, 操作系統的 credential manager 依然會保存此一私密資料. 使用 git config --edit --system 可以帶出 vi 編輯器, 編輯 git 指令所使用的系統設定, 只要將 credential 項目中的 helper = manager 刪除後儲存, 即可關閉內定將使用者 Github 帳號密碼儲存於操作系統的問題. \n', 'tags': '', 'url': '使用 SSH 執行 Git clone 與 push-4.html'}, {'title': '建立 OpenSSH 格式的 Private 與 Public Keys-4', 'text': '接下來, 在可攜系統的命令列視窗中, 以 sh 執行 Git 的 shell, 使用 ssh-keygen -t rsa -b 4096 -C "This is my key" 建立位於 y:\\home\\.ssh\\id_rsa 的 Private Key 與位於 y:\\home\\.ssh\\id_rsa.pub 的 Public Key, 並且將 id_rsa.pub 的內容, 轉貼到 Github 帳號 settings 中 SSH and GPG keys 項目內的 SSH Public Key 區. 使用 ssh 協定執行 git clone 為了採用 OpenSSH 協定執行登入認證, 使用者在近端 git clone 倉儲時, 必須使用類似 git@github.com:帳號/倉儲.git 的連線 URL 例如: \xa0 要將 \xa0 https://github.com/mdecourse/wcm2019 \xa0 的倉儲, 以 ssh 協定 git clone 到近端時, 必須使用: git clone git@github.com:mdecourse/wcm2019.git 建立位於 wcm2019 的倉儲目錄, 而 git add ., git commit -m 與 git push 的指令則與採 http 連線時的指令相同. 只是採用 ssh 連線下的 git push, git 會讀取位於 y:\\home\\.ssh\\id_rsa Private Key 與 Github 帳號上所設定的 Public Key 進行比對, 若同為一個 pair, 則通過認證, 可將改版的資料推送到遠端倉儲中. 上述 ssh 協定下的 git clone 與 git push, 配合 ungit 使用時, 可以直接輸入提交訊息後, 以 commit & push 將近端版本提交推送到遠端. ssh 連線透過 proxy server, 必須設定 y:\\home\\.ssh\\config 如下: \n ProxyCommand y:/PortableGit/mingw64/bin/connect.exe -H proxy.kmol.info:3128 %h %p\n \n# for user1\n# url = git@github.com_user1:user1/cmstest.git\nHost github.com_user1\n    User git\n    Port 22\n    Hostname github.com\n \n    IdentityFile "y:\\home\\.ssh\\id_rsa_user1"\n \n    TCPKeepAlive yes\n    IdentitiesOnly yes\n     \n# for user2\n# url = git@github.com_user2:user2/user2.com.git\nHost github.com_user2\n    Port 22\n    Hostname github.com\n \n    IdentityFile "y:\\home\\.ssh\\id_rsa_user2"\n \n    TCPKeepAlive yes\n    IdentitiesOnly yes\n     \n \n', 'tags': '', 'url': '建立 OpenSSH 格式的 Private 與 Public Keys-4.html'}, {'title': 'week_5', 'text': '第五周教學影片及內容 \n 加入相關內容: 導入 Ungit、利用 \xa0 kungit.bat \xa0 在倉儲目錄中啟用 ungit、自製可攜系統、納入\xa0 ShareX \xa0 的可攜系統、建立\xa0 Blogger \xa0 網誌、建立 Github 倉儲、建立\xa0 Github Pages \xa0 網站、利用\xa0 CMSimfly \xa0 以及 \xa0 Github Pages \xa0 建立網際內容管理系統、以 ssh 連線對 Github 倉儲改版、加入 y:\\home\\.ssh\\config 設定, 讓 ssh 連線透過 Proxy Server 擷取資料以及IPv6 環境設定與 Git 操作設定。 \n 進度內容及影片取自 https://2019wcm.blogspot.com/ 網際內容管理網誌。 \n', 'tags': '', 'url': 'week_5.html'}, {'title': '導入 Ungit-3', 'text': '說明自 2019 Spring 開始, 可以利用 \xa0 ungit \xa0 簡化近端 Git 指令的使用, 透過網際圖形化介面, 讓使用者進行分散式內容版次管理. \xa0 說明如何利用 \xa0 CMSimfly \xa0 以動態模式在近端改版後, 將資料轉為靜態網頁後, 新增提交推送到遠端對應倉儲, 詳細說明請參閱下列影片: \xa0 \n 利用 \xa0 kungit.bat \xa0 在倉儲目錄中啟用 ungit \n \xa0 \n', 'tags': '', 'url': '導入 Ungit-3.html'}, {'title': '自製可攜系統-4', 'text': '以下影片則說明如何自行建立可攜程式系統, 包括從 \xa0 Python \xa0 下載, 安裝, 複製到隨身碟, 移除系統安裝, 然後進行命令搜尋設定等相關技術, 所完成的可攜隨身系統可以解譯流程執行 Python 3 與 ANSI C 程式: \n 納入 \xa0 ShareX \xa0 的可攜系統: \n \xa0 \n 建立 \xa0 Blogger \xa0 網誌 \n 本學期除了繼續使用 \xa0 Pelican \xa0 網誌系統外, 還導入動態的 \xa0 Google Blogger \xa0 網誌, 以下影片說明如何登入 Google 帳號後, 建立客製化的 Blogger 系統: 機械設計工程系網誌:\xa0 https://mde2019.blogspot.com/\xa0 精密機械工程科網誌:\xa0 https://pmenfu.blogspot.com/ \n', 'tags': '', 'url': '自製可攜系統-4.html'}, {'title': '建立 Github 倉儲-8', 'text': '\n 建立 \xa0 Github Pages \xa0 網站 \n \n 利用 \xa0 CMSimfly \xa0 以及 \xa0 Github Pages \xa0 建立網際內容管理系統: \n \xa0 \n', 'tags': '', 'url': '建立 Github 倉儲-8.html'}, {'title': '以 ssh 連線對 Github 倉儲改版-4', 'text': '\xa0 \xa0 \n', 'tags': '', 'url': '以 ssh 連線對 Github 倉儲改版-4.html'}, {'title': '加入設定, 讓 ssh 連線透過 Proxy Server 擷取資料-4', 'text': '加入 y:\\home\\.ssh\\config 設定, 讓 ssh 連線透過 Proxy Server 擷取資料: \xa0 \xa0 \n', 'tags': '', 'url': '加入設定, 讓 ssh 連線透過 Proxy Server 擷取資料-4.html'}, {'title': 'IPv6 環境設定與 Git 操作設定-4', 'text': '\n', 'tags': '', 'url': 'IPv6 環境設定與 Git 操作設定-4.html'}, {'title': 'week_8', 'text': '進度內容及影片取自 https://2019wcm.blogspot.com/ 網際內容管理網誌。 \n', 'tags': '', 'url': 'week_8.html'}, {'title': '電腦初學者的網際內容管理-3', 'text': '\n \n \n 第一步 網路連線設定 了解機械設計系電腦輔助設計室電腦的網路設定, 其中包括 IPv4 網路與 IPv6 網路設定. 正常情況下, 電腦輔助設計室中的 64 台電腦透過 IPv4 協定下的 DHCP 與 NAT 上網, 各電腦以 DHCP client 取得 192.168.1.* 的網路位址, 然後以 NAT 的一組外部 IP 上網, 通常必須設定 Proxy Server 為 http://proxy.kmol.info:3128 後上網會比較順暢, 但若 8 台 Proxy Servers 無法正常運作時, 則取消 Proxy Server 的設定. 瀏覽器代理主機設定 了解如何設定 Google Chrome 與 Firefox 瀏覽器的代理主機設定. 申請 Github 帳號 利用 Gmail 帳號申請 Github 帳號, 申請後利用電子郵箱收信進行確認後, 就可以在 Github 上建立倉儲. 第二步 配置可攜程式環境 取得 Windows 10 64 位元環境下的可攜程式環境 ( 下載\xa0 2019_cdb_w5.7z ), 下載後解開目錄, 放入 USB3.0 規格以上的隨身碟或隨身硬碟. 以滑鼠點擊 start.bat 開啟可攜隨身系統, 以 stop.bat 關閉可攜隨身系統, 隨身碟必須在關閉所有應用程式執行下, 才可正常退出. 了解基本的 DOS (Disk Operating System) 指令 C:\\> 符號為 DOS 命令列視窗的回應 (Prompt), 表示目前在 C 槽硬碟的 \\ 根目錄, 若要切換到 Y 槽, 則在電腦的回應後, 輸入 Y:, 命令列將轉為 Y:\\> 若要更換目錄, 則使用 cd, 也就是 change directory 的意思, 例如: Y:\\>cd tmp 表示要從 Y 槽的根目錄更換到 tmp 目錄, 也就是 Y:\\tmp> 若要再回到 Y 槽的根目錄, 可以使用 cd .. 表示要從目前所在目錄, 往上跳回一個目錄, 也就是重新回到 Y 槽的根目錄. 另外, 無論目前位於哪一個子目錄, 也可以使用 cd \\ 直接回到根目錄. 或者從 Y:\\> 直接使用 cd \\tmp\\repo\\ssh\\wcm2019 直接從 Y 槽的根目錄, 跳進 Y:\\tmp\\repo\\ssh\\wcm2019> 此外, 常用的 DOS 指令有: dir - 列出目前所在目錄的內容 mkdir - 隨後加上要建立目錄的名稱, 可以建立目錄 cls - clear screen, 清除目前的命令列顯示的內容 第三步 建立 Git 倉儲, 並 clone 倉儲至近端工作後, 對遠端倉儲改版 可攜程式系統中已經內建 git, 可以在啟動 start.bat 後, 透過 path 的設定, 直接執行 git 指令. 建立 Git 倉儲, 共分為兩類, 一類是直接在 Github 網際介面下建立倉儲時, 要求建立 README.md 檔案, 之後可以直接在近端, 以 git clone 加上倉儲連線 URL, 將倉儲克隆一份到近端, 並以最新版本作為工作目錄, 使用者改版後, 可以直接透過 git add, commit 與 push 對遠端倉儲改版. 另一類則是故意在 Github 網際介面下建立倉儲時, 不要建立任何檔案, 而是在近端自行利用 git 指令建立倉儲架構, 新增內容後, 以 git remote add 設法在近端倉儲中納入 origin URL 後, 將近端倉儲版本新增提交推送到遠端. git add git add 可以用來新增一個檔案, 數個檔案, 或在之前提交後所新增的所有內容. git add 在 GIT 架構下, 是對所新增或修改的內容拍快照: \n git add . adds all modified and new (untracked) files in the current directory and all subdirectories to the staging area (a.k.a. the index), thus preparing them to be included in the next git commit . Any files matching the patterns in the .gitignore file will be ignored by git add \n git commit\xa0 git commit 執行之前, 必須使用 git config 建立臨時或永久的身分註記, 因為 GIT 在展開所有改版內容時, 必須明確登錄這些變更的作者與時間. 當使用者採用 git commit -m "改版說明訊息", 此次提交到 .git 目錄下的更動內容, 均會綁定使用者身分與改版所輸入的說明訊息. git push git push 在隨後沒有輸入遠端 URL 代號時, 表示要推送到 origin, 若透過 git remote add 設定其他代號與 URL 對應時, git push 加上代號, 就可以將此次的提交內容, 推送到指定的 URL 所在遠端倉儲. 第四步 自行建立靜態內容管理網站 利用 CMSimfly ( https://github.com/chiamingyen/cmsimfly )\xa0內容, 建立自己的 \xa0 Github Pages \xa0 網站 第五步 管理網站內容 學習如何使用 CMSimfly, 在網站中加入各種內容 第六步 使用 Flask, bs4 與 lxml 模組 了解 CMSimfly 如何建構, 並且嘗試修改現有功能, 除錯或建立自己的網際內容管理系統 \n \n 進階內容 第七步 虛擬主機下的類 Github 網站 如何利用 \xa0 Fossil SCM , 在 \xa0 Virtualbox \xa0 中的 \xa0 Ubuntu 18.04-2 \xa0(8.5 GB) 建立類似 Github 的系統, 可以放入 CMSimfly 的靜態網頁 第八步 實體主機下的網際內容管理 如何在實體主機上安裝 \xa0 Ubuntu \xa0 18.04 ( https://www.ubuntu.com/about/release-cycle ), 配置網路連線, 然後架構 \xa0 uwsgi \xa0 環境下的 CMSimfly 動態網站, 或建立 Fossil SCM 用來伺服管理 CMSimfly 下有版次管理的靜態網頁, 或利用 \xa0 nginx \xa0 伺服無版次管理的 CMSimfly 靜態網頁.', 'tags': '', 'url': '電腦初學者的網際內容管理-3.html'}, {'title': '期中影片', 'text': '', 'tags': '', 'url': '期中影片.html'}, {'title': 'ROC Flag', 'text': '\n  啟動 Brython  \n \n \n \n \n \n W14 <<  Previous \n  footer  \n \n \n  Link back to Colorlib can\'t be removed. Template is licensed under CC BY 3.0.   Copyright ©\n \nAll rights reserved | This template is made with   by  Colorlib    Link back to Colorlib can\'t be removed. Template is licensed under CC BY 3.0.  \n \n \n  for footer  \n \n  for site wrap  \n \n  <script src="./../static/chimper/js/jquery-3.3.1.min.js"></script>  \n \n \n \n \n \n \n \n \n \n \n \n            <script src="./../static/js/typed.js"></script>\n                    <script>\n                    var typed = new Typed(\'.typed-words\', {\n                    strings: ["Web Apps"," WordPress"," Mobile Apps"],\n                    typeSpeed: 80,\n                    backSpeed: 80,\n                    backDelay: 4000,\n                    startDelay: 1000,\n                    loop: true,\n                    showCursor: true\n                    });\n                    </script>\n             \n', 'tags': '', 'url': 'ROC Flag.html'}]};